K <- length(t)
or <- t[order(t)]
h <- apply(cbind(or[2:K], or[1:(K-1)]), MARGIN = 1, function(x) x[1] - x[2])
A_11 <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
A_12 <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
A_22 <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
A_11[1,1] <- h[1]/3; A_11[K,K] <- h[K-1]/3;
A_12[1,1] <- (h[1]^3)/(-45); A_12[K,K] <- -( (h[K-1]^3) / 45)
A_22[1,1] <- (4/315)*(h[1]^5); A_22[K,K] <- -(h[K-1]^5) * (4/315)
for (i in 2:(K-1)) {
A_11[i,i] <- (h[i-1]/3) + (h[i]/3)
A_12[i,i] <- -(h[i-1]^3/45) - (h[i]^3/45)
A_22[i,i] <- (4/315) * (h[i-1]^5 + h[i]^5)
}
for (i in 1:K) {
A_11[i,i-1] <- (h[i-1]/6); A_11[i-1,i] <- (h[i-1]/6)
A_12[i, i-1] <- (-7/360) * (h[i-1]^3); A_12[i-1, i] <- (-7/360) * (h[i-1]^3);
A_22[i, i-1] <- (31/15120) * (h[i-1]^5); A_22[i-1, i] <- (31/15120) * (h[i-1]^5);
}
# Mapping matrix F
FF <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
B <- matrix(data = rep(0, (K-2)^2), ncol = K-2, nrow = K-2)
D <- matrix(data = rep(0, (K-2)*K), ncol = K, nrow = K-2)
for(i in 1:(K-2)) {
D[i,i] <- (1/h[i])
D[i, i+1] <- -(1/h[i]) - (1/h[i+1])
D[i, i+2] <- (1/h[i+1])
B[i,i] <- (h[i] + h[i+1]) / 3
if (i < (K-2)){ B[i, i+1] <- h[i+1]/6; B[i+1, i] <- h[i+1]/6 }
}
BB <- solve(B)
FF = rbind(rep(0, K), BB %*% D, rep(0, K))
PEN1 <- A_11 + (t(FF) %*% t(A_12)) + (A_12 %*% FF) + (t(FF) %*% A_22 %*% FF)
PEN2 <- t(D) %*% BB %*% D
print(PEN1)
print(PEN2)
PENN <- (PEN1 + lambda2*PEN2)
return( rbind( c(1, rep(0, K)), cbind(rep(0, K), PENN))  )  # matrix with additional const value
return((1/n)*(PEN1 + lambda2*PEN2))
}
#### illustrative example data prep
D <- cbind(time = rfst, cens = GBSG$cens, apply(GBSG[, c("age", "grade", "prm", "posnodal", "tumsize")], 2, function(x){(x-mean(x))/sqrt(var(x))}))
knots_GBSG <- quantile(rfst, seq(0.0, 1.0, 0.2))
obj_GBSG <- s(rfst, bs = "cr", k = 6, m = 2)
objc_GBSG <- smooth.construct.cr.smooth.spec(obj_GBSG, list(rfst = rfst), knots = list( rfst = knots_GBSG))
Fts.GBSG <- cbind(rep(1, length(rfst)), objc_GBSG$X) # attatched const term
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 1, ttime = 1, iter.max = 1000, delta = 0.005, verbal = TRUE)
prox.fit <- function (time, death, X, Ftime, knots, theta, iter.max, lambda1, lambda2, ttime, acceleration = FALSE, delta = 0.5, verbal = FALSE) {
epsilon <- 5; iter <- 0; t <- ttime; BTHETA <- NULL; BLIKL <- Inf; BPEN <- NULL; at.iter <- 0;
likelihood_iter <- rep(0, iter.max); epsilon_iter <- rep(0, iter.max);
ord <- order(time)
Ftime <- Ftime[ord, ]
n <- nrow(X); d <- death; p <- ncol(X); q <- ncol(Ftime)
if(missing(theta)){
theta <- matrix(rep(0, p * q), ncol = q) # creates p X q matrix of 0s
BTHETA <- theta
} else {
theta <- matrix(rep(0, p * q), ncol = q) # creates p X q matrix of 0s
BTHETA <- theta
}
if (acceleration == TRUE) { theta_1 <- matrix(rep(0, p*q), ncol = q) }
X <- apply(X, 2, function(x) { x - mean(x)}) # normalize
eventtimes <- (1:n)[d == 1]
k <- length(eventtimes)
JJ <- Ftime
Ftime <- Ftime[eventtimes, ]
# Fts should have knots
penalty <- penal(n = n, knots, lambda2 = lambda2) # OMEGA_1, OMEGA_2 for each cov (list of matrices)
if (verbal) { cat("PENALTY: \n"); print(penalty) }
tt <- numeric(); tt[1] <- 1; for(i in 2:(iter.max+1)) {tt[i] <- (1+sqrt(1 + (4 * tt[i-1]^2)))/2}
while (epsilon > 1e-06 && iter < iter.max) {
th <- theta
LHS <- 1; RHS <- 0;
iter <- iter + 1
t_s <- t
# current theta(s-1): gradient calculations on theta(s-1)
tmp <- sapply(eventtimes, sumevents_c, X, Ftime, theta, n, p, eventtimes)
hi <- unlist(tmp[1, ])
PEN <- lambda1 * sum(apply( theta, 1, FUN = function(th_p) sqrt(t(th_p) %*% penalty %*% th_p )))
lik <- -(sum(log(hi)) + sum(X[eventtimes, ] * t(theta %*% t(Ftime)))) + PEN # previous likelihood
# minimizing negative log lik
scores <- matrix(unlist(tmp[2, ]), ncol = k) %*% rep.int(1, k) + matrix(t(X[eventtimes, ]) %*% Ftime, ncol = 1)
thetanew <- matrix(matrix(theta, ncol = 1) + (t_s * matrix(t(scores), ncol = 1)), ncol = q)
grad <- matrix(t(scores), ncol = 1)
#grad <- matrix(t(scores), ncol = 1) # gradient w.r.t 11, 12, ..., 1q, 21, 22, ..., 2q, ...., p*q
start.time <- Sys.time(); iter.back <- 0;
while (LHS > RHS) {
iter.back <- iter.back + 1;
thetanew <- matrix(matrix(th, ncol = 1) + (t_s * grad), ncol = q)
prx <- prox(thetanew, penalty, t_s, lambda1);
G <- (1/t_s) * (matrix(t(th), ncol = 1) -  prx);
theta <- matrix(matrix(t(th), ncol =  1) - (t_s * (G)), byrow = TRUE, ncol = q)
tmp <- sapply(eventtimes, sumevents_c, X, Ftime, theta, n, p, eventtimes)
hi <- unlist(tmp[1, ])
lik_n <- sum(log(hi)) + sum(X[eventtimes, ] * t(theta %*% t(Ftime))) # current likelihood)
LHS <- - lik_n
RHS <- (lik - PEN) + (t_s  * (t(grad) %*% G)) + ( (t_s / 2)*( norm(G, "2")^2) )
t_s <- delta * t_s
}
end.time <- Sys.time()
if (verbal) cat("Time taken in backtracking:", (end.time - start.time), "\n")
if (acceleration == TRUE) {
theta_acc <- theta + ((tt[iter]-1)/tt[iter+1]) * (theta - theta_1) # (x_k - x_k-1)
theta_1 <- theta # x_k-1
tmp <- sapply(eventtimes, sumevents_c, X, Ftime, theta_acc, n, p, eventtimes)
hi <- unlist(tmp[1, ])
lik_n <- sum(log(hi)) + sum(X[eventtimes, ] * t(theta_acc %*% t(Ftime))) # current likelihood)
PEN <- lambda1 * sum(apply( theta_acc, 1, FUN = function(th_p) sqrt(t(th_p) %*% penalty %*% th_p )))
} else {
# true update after backtracking line search
#theta <- matrix(prox(thetanew, penalty, t_s, lambda1), byrow = TRUE, ncol = q)
tmp <- sapply(eventtimes, sumevents_c, X, Ftime, matrix(prx, byrow = TRUE, ncol = q), n, p, eventtimes)
hi <- unlist(tmp[1, ])
lik_n <- sum(log(hi)) + sum(X[eventtimes, ] * t(theta %*% t(Ftime))) # current likelihood)
PEN <- lambda1 * sum(apply( theta, 1, FUN = function(th_p) sqrt(t(th_p) %*% penalty %*% th_p )))
}
if (verbal == TRUE) cat("Penalty Term:", PEN,  "\n")
if (-lik_n + PEN < BLIKL) {
if (verbal) print("new best likelihood")
BTHETA <- theta; BLIKL <- (-lik_n + PEN); BPEN <- PEN; at.iter <- iter
}
if (!acceleration) {
epsilon <- max(abs(theta - th));
} else {
epsilon <- max(abs(theta_acc - th));
}
likelihood_iter[iter] <- -lik_n + PEN
epsilon_iter[iter] <- epsilon
if (verbal == TRUE) {
cat("Epsilon:", epsilon, "\nIteration:", iter, "\n")
cat("Backtracking Step Size:", t_s, "\n")
cat("# of Backtracking Steps:", iter.back, "\n")
cat('Neg Log Likelihood:', -lik_n, "\n")
cat('Neg Log Likelihood w/ Penal:', -lik_n + PEN, "\n")
cat("------------------------------ \n")
}
if (iter > iter.max) { stop("Likelihood did not converge after ", iter, " iterations") }
}
sterr <- 0
cat("Best likelihood obs: ", BLIKL, "at iteration ", at.iter, "\n")
if (!acceleration) {
# Hessian calculation at final estimate:
tmp <- sapply(eventtimes, sumevents.reg, X, Ftime, BTHETA, n, p, eventtimes)
hi <- unlist(tmp[1, ])
lik <- -(sum(log(hi)) + sum(X[eventtimes, ] * t(BTHETA %*% t(Ftime))))
scores <- matrix(unlist(tmp[2, ]), ncol = k) %*% rep.int(1, k) + matrix(t(X[eventtimes, ]) %*% Ftime, ncol = 1)
hess <- (matrix(matrix(unlist(tmp[3, ]), ncol = k) %*% rep(1, k), ncol = p * q, byrow = FALSE))
outlist <- list(time = time, X = X, Ft = JJ, Ftime = Ftime, death = death, theta = theta, hess = hess,
btheta = BTHETA, se = sterr, lik = lik + PEN, blik = BLIKL, unpen_lik = lik_n,
unpen_blik = BLIKL - BPEN, iter = iter, hi = hi, PEN = penalty,
likelihood_iter = likelihood_iter, epsilon_iter = epsilon_iter)
}
else {
outlist <- list(time = time, X = X, Ft = JJ, Ftime = Ftime, death = death, theta = theta_acc,
btheta = BTHETA, se = sterr, lik = lik + PEN, blik = BLIKL, unpen_lik = lik_n,
unpen_blik = BLIKL - BPEN, iter = iter, hi = hi, PEN = penalty,
likelihood_iter = likelihood_iter, epsilon_iter = epsilon_iter)
}
outlist
}
gcv.prox.fit <- function(time, death, X, cv.df, iter.max, lambda1grid, lambda2grid, ttime) {
CV_l1 <- vector(mode = "double", length = length(lambda1grid))
it <- 0
#CV_l1 <- list()
if (!require(mgcv)) {
cat("Warning: Need package 'mgcv' in order to generate regression spline. \n")
} else {
####### do once; find basis #########
# D -- data with labels "time" and "delta"
knots <- quantile(time, seq(0.0, 1.0, 1/cv.df))
obj_sim <- mgcv::s(time, bs = "cr", k = (cv.df + 1))
objc_sim <- mgcv::smooth.construct.cr.smooth.spec(obj_sim, list(time = time), knots = list( time = knots))
#Fts <- cbind(rep(1, length(time)), objc_sim$X) # attatched const term
#################################################################
#################################################################
hessPen <- function(H) {
fun <- function(x) {
X1 <- (1/(2*as.numeric(t(x) %*% H %*% x))) * H
X2 <- (1 / as.numeric(t(x)%*% H %*% x)^(3/2)) * ((H %*% x) %*% t(H %*% x))
return(X1 - X2)
}
return(fun)
}
hessPenMult <- function(ls_matrices, num_matrix) {
# theta is p*k matrix, find hessian of penalty
f <- function(theta) {
p <- dim(theta)[1]; k <- dim(theta)[2]; li <- list()
for (i in 1:num_matrix) {
ff <- hessPen(ls_matrices); H_i <- ff(theta[i, ]); li[[i]] <- H_i;
}
return(Matrix::bdiag(li))
}
}
cat("generalized cross validation: \n")
ff <- function(it, l1, l2) {
cat("testing pt:", c(l1, l2), "\n")
cvfit <- prox.fit(time, death, X, objc_sim$X, knots, theta = NULL, iter.max = iter.max, lambda1 = l1, lambda2 = l1, ttime = ttime, delta = 0.05, verbal = FALSE)
n <- length(death)
PEN <- cvfit$PEN
HES <- cvfit$hess
cv.fit.theta <- cvfit$btheta
p <- ncol(cv.fit.theta); k <- nrow(cv.fit.theta);
cv.lik <- cvfit$unpen_lik
p <- hessPenMult(PEN, k); PHES <- p(cv.fit.theta);
eff <- sum(diag( ginv( HES - as.matrix(PHES)) %*% HES ))
GCV <- (cvfit$unpen_blik) / (n * (1 - (eff/n)))^2
}
CVList <- paramtest::grid_search(ff, params = list(l1 = lambda1grid, l2 = lambda2grid))
}
return(CVList)
}
Fts.GBSG <- cbind(rep(1, length(rfst)), objc_GBSG$X) # attatched const term
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 1, ttime = 1, iter.max = 1000, delta = 0.005, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 1, ttime = 1, iter.max = 1000, delta = 0.5, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 1, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 1, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
reg.fit.GBSG <- reg.fit(time = rfst, death = cens, X = GBSG[, c("age", "grade", "prm", "posnodal", "tumsize")], Ftime = Fts.GBSG, t_s = 1, iter.max = 1000)
###########################################################################################
# Based off of the CoxRidge package, computes non-regularized minimized for B-spline paramatrized
# by formulation in Yi Yang, 2020 using a Newton-Raphson descent method
###########################################################################################
reg.fit <- function (time, death, X, Ftime, theta, t_s, iter.max) {
epsilon <- 5; iter <- 0; at.iter <- 0;
likelihood_iter <- rep(0, iter.max); epsilon_iter <- rep(0, iter.max);
ord <- order(time)
Ftime <- Ftime[ord, ]
n <- nrow(X); d <- death; p <- ncol(X); q <- ncol(Ftime)
if(missing(theta)){
theta <- matrix(rep(0, p * q), ncol = q) # creates p X q matrix of 0s
BTHETA <- theta
}
X <- apply(X, 2, function(x) { x - mean(x)}) # normalize
eventtimes <- (1:n)[d == 1]
k <- length(eventtimes)
JJ <- Ftime
Ftime <- Ftime[eventtimes, ]
while (epsilon > 1e-06 && iter < iter.max) {
th <- theta
iter <- iter + 1
# current theta(s-1): gradient calculations on theta(s-1)
tmp <- sapply(eventtimes, sumevents.reg, X, Ftime, theta, n, p, eventtimes)
hi <- unlist(tmp[1, ])
lik <- -(sum(log(hi)) + sum(X[eventtimes, ] * t(theta %*% t(Ftime))))
scores <- matrix(unlist(tmp[2, ]), ncol = k) %*% rep.int(1, k) + matrix(t(X[eventtimes, ]) %*% Ftime, ncol = 1)
hess <- round(-(matrix(matrix(unlist(tmp[3, ]), ncol = k) %*% rep(1, k), ncol = p * q, byrow = FALSE)), digits = 6 )
theta <- matrix(matrix(theta, ncol = 1) - t_s * (ginv(hess) %*% matrix(t(scores), ncol = 1)), ncol = q)
epsilon <- max(abs(theta - th))
epsilon_iter[iter] <- epsilon
likelihood_iter[iter] <- lik
cat('Likelihood:', lik, "\n")
cat("Epsilon:", epsilon, "\nIteration:", iter, "\n")
if (iter > iter.max) {
stop("Likelihood did not converge after ", iter, " iterations")
}
}
# sterr <- round(matrix(sqrt(abs(diag(solve(hess)))), nrow = p), 5)
sterr <- 0
outlist <- list(time = time, X = X, Ft = JJ, Ftime = Ftime, death = death, theta = theta,
se = sterr, lik = lik, iter = iter, hi = hi,
likelihood_iter = likelihood_iter, epsilon_iter = epsilon_iter)
outlist
}
reg.fit.GBSG <- reg.fit(time = rfst, death = cens, X = GBSG[, c("age", "grade", "prm", "posnodal", "tumsize")], Ftime = Fts.GBSG, t_s = 1, iter.max = 1000)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 1, ttime = 1, iter.max = 1000, delta = 1, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 1, ttime = 1, iter.max = 1000, delta = 0.5, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 1, ttime = 1, iter.max = 1000, delta = 0.8, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 10, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 0.05, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 0.05, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.5, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 0.5, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.5, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 0.5, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
penal <- function(n, t, lambda2) {
K <- length(t)
or <- t[order(t)]
h <- apply(cbind(or[2:K], or[1:(K-1)]), MARGIN = 1, function(x) x[1] - x[2])
A_11 <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
A_12 <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
A_22 <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
A_11[1,1] <- h[1]/3; A_11[K,K] <- h[K-1]/3;
A_12[1,1] <- (h[1]^3)/(-45); A_12[K,K] <- -( (h[K-1]^3) / 45)
A_22[1,1] <- (4/315)*(h[1]^5); A_22[K,K] <- -(h[K-1]^5) * (4/315)
for (i in 2:(K-1)) {
A_11[i,i] <- (h[i-1]/3) + (h[i]/3)
A_12[i,i] <- -(h[i-1]^3/45) - (h[i]^3/45)
A_22[i,i] <- (4/315) * (h[i-1]^5 + h[i]^5)
}
for (i in 1:K) {
A_11[i,i-1] <- (h[i-1]/6); A_11[i-1,i] <- (h[i-1]/6)
A_12[i, i-1] <- (-7/360) * (h[i-1]^3); A_12[i-1, i] <- (-7/360) * (h[i-1]^3);
A_22[i, i-1] <- (31/15120) * (h[i-1]^5); A_22[i-1, i] <- (31/15120) * (h[i-1]^5);
}
# Mapping matrix F
FF <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
B <- matrix(data = rep(0, (K-2)^2), ncol = K-2, nrow = K-2)
D <- matrix(data = rep(0, (K-2)*K), ncol = K, nrow = K-2)
for(i in 1:(K-2)) {
D[i,i] <- (1/h[i])
D[i, i+1] <- -(1/h[i]) - (1/h[i+1])
D[i, i+2] <- (1/h[i+1])
B[i,i] <- (h[i] + h[i+1]) / 3
if (i < (K-2)){ B[i, i+1] <- h[i+1]/6; B[i+1, i] <- h[i+1]/6 }
}
BB <- solve(B)
FF = rbind(rep(0, K), BB %*% D, rep(0, K))
PEN1 <- A_11 + (t(FF) %*% t(A_12)) + (A_12 %*% FF) + (t(FF) %*% A_22 %*% FF)
PEN2 <- t(D) %*% BB %*% D
print(PEN1)
print(PEN2)
PENN <- (PEN1 + lambda2*PEN2)
return( rbind( c(1, rep(0, K)), cbind(rep(0, K), PENN))  )  # matrix with additional const value
return((PEN1 + lambda2*PEN2))
}
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 0.5, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
penal <- function(n, t, lambda2) {
K <- length(t)
or <- t[order(t)]
h <- apply(cbind(or[2:K], or[1:(K-1)]), MARGIN = 1, function(x) x[1] - x[2])
A_11 <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
A_12 <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
A_22 <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
A_11[1,1] <- h[1]/3; A_11[K,K] <- h[K-1]/3;
A_12[1,1] <- (h[1]^3)/(-45); A_12[K,K] <- -( (h[K-1]^3) / 45)
A_22[1,1] <- (4/315)*(h[1]^5); A_22[K,K] <- -(h[K-1]^5) * (4/315)
for (i in 2:(K-1)) {
A_11[i,i] <- (h[i-1]/3) + (h[i]/3)
A_12[i,i] <- -(h[i-1]^3/45) - (h[i]^3/45)
A_22[i,i] <- (4/315) * (h[i-1]^5 + h[i]^5)
}
for (i in 1:K) {
A_11[i,i-1] <- (h[i-1]/6); A_11[i-1,i] <- (h[i-1]/6)
A_12[i, i-1] <- (-7/360) * (h[i-1]^3); A_12[i-1, i] <- (-7/360) * (h[i-1]^3);
A_22[i, i-1] <- (31/15120) * (h[i-1]^5); A_22[i-1, i] <- (31/15120) * (h[i-1]^5);
}
# Mapping matrix F
FF <- matrix(data = rep(0, K^2), ncol = K, nrow = K)
B <- matrix(data = rep(0, (K-2)^2), ncol = K-2, nrow = K-2)
D <- matrix(data = rep(0, (K-2)*K), ncol = K, nrow = K-2)
for(i in 1:(K-2)) {
D[i,i] <- (1/h[i])
D[i, i+1] <- -(1/h[i]) - (1/h[i+1])
D[i, i+2] <- (1/h[i+1])
B[i,i] <- (h[i] + h[i+1]) / 3
if (i < (K-2)){ B[i, i+1] <- h[i+1]/6; B[i+1, i] <- h[i+1]/6 }
}
BB <- solve(B)
FF = rbind(rep(0, K), BB %*% D, rep(0, K))
PEN1 <- A_11 + (t(FF) %*% t(A_12)) + (A_12 %*% FF) + (t(FF) %*% A_22 %*% FF)
PEN2 <- t(D) %*% BB %*% D
print(PEN1)
print(PEN2)
PENN <- (PEN1 + lambda2*PEN2)
return( rbind( c(1, rep(0, K)), cbind(rep(0, K), PENN))  )  # matrix with additional const value
return((1/n)*(PEN1 + lambda2*PEN2))
}
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 0.5, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 10, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 0, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 10, ttime = 1, iter.max = 1000, delta = 0.05, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 10, ttime = 1, iter.max = 250, delta = 1, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 10, ttime = 0.5, iter.max = 250, delta = 1, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 1, lambda2 = 10, ttime = 0.5, iter.max = 250, delta = 1, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 10, lambda2 = 10, ttime = 0.5, iter.max = 250, delta = 1, verbal = TRUE)
prx.fit.GBSG <- prox.fit(rfst, cens, D[, c("age", "grade", "prm", "posnodal", "tumsize")], Fts.GBSG, knots_GBSG, lambda1 = 10, lambda2 = 10, ttime = 0.5, iter.max = 250, delta = 0.5, verbal = TRUE)
mag <- 1 # maginiturde of tv effect
cens_p <- 0.2 # probability of censoring
p <- 7 # covariate
n_f <- 10
ds_num <- 100
SIM_DATA <- rep(list( matrix(rep(0, n_f * (p+2)), ncol = (p+2) )), ds_num) # list container for simulation
n_f <- 3000
ds_num <- 10
SIM_DATA <- rep(list( matrix(rep(0, n_f * (p+2)), ncol = (p+2) )), ds_num) # list container for simulation
SIM_DATA_C <- rep(list( matrix(rep(0, n_f * (p+2)), ncol = (p+2) )), ds_num) # list container for simulation using random censoring
SIM_DATA_PVALS <- matrix(rep(0, ds_num * p), ncol = p)
gamma <- 1 # baseline hazard (Exp(1))
sigma_z <- diag(p-1)
set.seed(60615)
for(j in 1:length(SIM_DATA)) {
z <- matrix(0, nrow = n_f, ncol = p-1)
U <- runif(n_f, 0, 1)
time <- NULL
delta <- NULL
z <- rmvnorm(n_f, mean = rep(0, p-1), sigma = sigma_z)
z <- cbind(z, rbinom(n_f, 1, 0.4))
time_pre <- rep(0, n_f)
for (i in 1:n_f) {
f=function(t) {
integrand <- function(x) {gamma*exp(mag*z[i,1] - mag*z[i,3] + 2*mag*sin(3*pi*x/4)*(x<3)*z[i,2] + 0*z[i,4] + 0*z[i,5] + 0*z[i,6] + -0.8*mag*sin(3*pi*x/4)*(x<3)*z[i,7])} # look at each example covariate vector and integrate hazard
# assume exponential distribution with parameter 1
Lambda=integrate(integrand, lower = 0, upper = t)$value
Lambda+log(1-U[i])
}
r1 <- suppressWarnings(try(uniroot(f,  lower = 0, upper = 5), silent=TRUE))
if (class(r1) == "try-error"){
time_pre[i]=5
} else time_pre[i]=uniroot(f,  lower = 0, upper = 5)$root
}
time <- c(time, time_pre)
censored=runif(n_f,1,30)
censored=censored*(censored<3)+3*(censored>=3)
tcens=(censored<time) # censoring indicator
delta=1-tcens
mean(delta) # uncesored
time=time*(delta==1)+censored*(delta==0) # create min(t, c) survival times
delta = delta[order(time)]
z = z[order(time),]
time = time[order(time)]
SIM_DATA[[j]] <- cbind( z, time, delta )
colnames(SIM_DATA[[j]]) <- c(paste("X", 1:p, sep=""), "time", "delta")
fit.cox.sim <- coxph(Surv(time, delta) ~ ., data = as.data.frame(SIM_DATA[[j]]))
fit.cox.zph <- cox.zph(fit.cox.sim)
SIM_DATA_PVALS[j, ] <- fit.cox.zph$table[1:p, "p"]
}
SIM_DATA_F <- list(NULL); N <- 0
for(i in 1:dim(SIM_DATA_PVALS)[1]) { if (SIM_DATA_PVALS[i, 2] <= 0.005) { SIM_DATA_F[[i]] <- SIM_DATA[[i]]; N <- N+1 } }
length(SIM_DATA_F)
f1 <- function(t) 1*(t >= 0)
f2 <- function(t) 3*mag*sin((3*pi*t)/4)*(t<3)
f3 <- function(t) -1*(t >= 0)
f4 <- function(t) 0*(t>=0); f5 <- function(t) 0*(t>=0); f6 <- function(t) 0*(t>=0);
f7 <- function(t) -0.8*mag*sin((3*pi*t)/4)*(t<3)
f_list <- list(f1,f2,f3,f4,f5,f6,f7)
mse_prx <- function(time, X, theta, knots) {
time_grid <- seq(0,max(time), 0.01)
obj_sim_MSE = s(time_grid, bs = "cr", k = length(knots))
objc_sim_MSE = smooth.construct.cr.smooth.spec(obj_sim_MSE, list(time_grid = time_grid), knots = list( time_grid = knots))
#Fts <- cbind(rep(1, length(time_grid)), objc_sim_MSE$X) # attatched const term
vals <- theta %*% (t(objc_sim_MSE$X))
true_vals <- matrix(0, ncol = ncol(vals), nrow = nrow(vals))
for(i in 1:p) {
ff <- f_list[[i]]
true_vals[i, ] <- ff(time_grid)
}
diff <- vals - true_vals
return( sum(apply(diff, 2, function(x) t(x) %*% stats::cov(X) %*% x)) * (1/length(time_grid)) ) # normalized MSE
}
# to calculate a c-index as a measure of "accuracy"
# baseline should be the baseline hazard function (function(t) ...)
c_index_model <- function(obj, baseline) {
e <- 0; sm <- 0;
eventtimes <- (1:length(obj$death))[obj$death == 1]
t <- obj$time[eventtimes]
if( checkmate::checkFunction(baseline) != TRUE ) {
return(checkmate::checkFunction(baseline))
} else {
for(t_i in t) { # for each uncensored time
idx.i <- match(t_i, obj$time);
base.i <- obj$Ft[idx.i, ] # basis at value of t_i
x.i <- obj$X[idx.i, ] # covariates
haz.i <- baseline(t_i) * exp ( t( obj$theta %*% base.i ) %*% x.i )
for(t_j in obj$time) {
if (t_j > t_i) { # regardless of uncensored
# compute "risk" scores as hazard
e <- e + 1
idx.j <- match(t_j, obj$time);
base.j <- obj$Ft[idx.j, ] # basis at value of t_i
x.j <- obj$X[idx.j, ] # covariates
haz.j <- baseline(t_j) * exp ( t( obj$theta %*% (base.j) ) %*% x.j )
sm <- sm + ifelse(haz.j < haz.i, 1, 0)
}
}
}
return( sm / e )
}
}
#### illustrative example data prep
D <- cbind(time = rfst, cens = GBSG$cens, apply(GBSG[, c("age", "grade", "prm", "posnodal", "tumsize")], 2, function(x){(x-mean(x))/sqrt(var(x))}))
#############################################################################################
ex <- SIM_DATA_F[[4]]
time <- ex[, "time"]
XX <- ex[, 1:p]
XX
time <- ex[, "time"]
XX <- ex[, 1:p]
censored_sim <- ex[, "delta"]
knots <- quantile(time, seq(0.0, 1.0, 1/5)) # 4 knots here
knots
obj_sim <- s(time, bs = "cr", k = 6)
objc_sim <- smooth.construct.cr.smooth.spec(obj_sim, list(time = time), knots = list( time = knots))
plot(time, objc_sim$X[, 6])
fit.prx <- prox.fit(time, censored_sim, XX, Fts, knots = knots, iter.max = 1000, lambda1 = 5, lambda2 = 1, ttime = 1, delta = 0.05, acceleration = FALSE, verbal = TRUE)
Fts <- cbind(rep(1, length(time)), objc_sim$X) # attatched const term
fit.prx2 <- prox.fit(time, censored_sim, XX, Fts, knots = knots, iter.max = 500, lambda1 = 1, lambda2 = 1, ttime = 1, delta = 0.05, acceleration = FALSE)
fit.prx2 <- prox.fit(time, censored_sim, XX, Fts, knots = knots, iter.max = 500, lambda1 = 1, lambda2 = 1, ttime = 1, delta = 0.05, acceleration = FALSE, verbal = TRUE)
dim(XX)
reg.fit <- reg.fit(time = time, death = censored_sim, X = XX, Ftime = objc_sim$X, t_s = 1, iter.max = 1000)
plot.prx(reg.fit, variable = 7, continue = TRUE, b.theta = FALSE, col = "orange")
plot.prx(reg.fit, variable = 7, continue = TRUE, b.theta = TRUE, col = "orange")
plot.prx(reg.fit, variable = 7, continue = TRUE, col = "orange")
plot.prx(reg.fit, variable = 7, continue = FALSE, col = "orange")
plot.prx(reg.fit, variable = 1, continue = FALSE, col = "orange")
plot.prx(reg.fit, variable = 2, continue = FALSE, col = "orange")
plot.prx(reg.fit, variable = 3, continue = FALSE, col = "orange")
plot.prx(reg.fit, variable = 4, continue = FALSE, col = "orange")
plot.prx(reg.fit, variable = 5, continue = FALSE, col = "orange")
fit.prx <- prox.fit(time, censored_sim, XX, Fts, knots = knots, iter.max = 1000, lambda1 = 5, lambda2 = 1, ttime = 1, delta = 0.05, acceleration = FALSE, verbal = TRUE)
library("devtools")
library(roxygen2)
setwd("C:\Users\yasha\Documents\R")
setwd("C:/Users/yasha/Documents/R")
create(ProxCox)
create("ProxCox")
devtools::document()
setwd("C:/Users/yasha/Documents/R/ProxCox\R")
setwd("C:/Users/yasha/Documents/R/ProxCox/R")
devtools::document()
devtools::document()
usethis::use_rcpp()
devtools::document()
usethis::use_rcpp_armadillo()
usethis::use_rcpp_armadillo()
devtools::document()
